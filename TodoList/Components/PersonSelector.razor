
@page "/PersonSelector"

<h3>Person Selector</h3>

@using TodoDataAccess
@using TodoDataAccess.Models
@using TodoDataAccess.DataAccess
@using TodoList.ViewModels
@using TodoList.Data.SqlDataAccess
@* Ensure you put the "I" here! the whole point of using the interface is to decouple the DB implementation from the UI. Also it won't work anyway. *@
@inject IPersonData _oldPersonData;
@inject IPersonDataAccess _personData;

@if (people == null)
{
    <p><em>Loading...</em></p>
}
else
{

    @*<div class="input-group mb-3">
        <div class="input-group-prepend">
            <label class="input-group-text" for="inputGroupSelect01">Options</label>
        </div>
        <select class="custom-select" id="inputGroupSelect01">
            <option>Choose Person...</option>
            @foreach (var p in people)
            {
                //this onclick event never gets triggered, probably because of the weird custom bootstrap you used.
                //probably better to just stick to a dropdown with a label next to it in a row that shows the name.
                <option value="@p.PersonID" @onclick="@(e => UpdateSelectedPerson(p))">@p.LastName, @p.FirstName</option>
            }
        </select>
    </div>*@

    <div class="dropdown ">
        <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenu2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            Select Person
        </button>
        <div class="dropdown-menu scrollableDropdown" aria-labelledby="dropdownMenu2">
            @foreach (var p in people)
            {
                <button class="dropdown-item " value="@p.PersonID" @onclick="@(e => UpdateSelectedPerson(p))" href="#">@p.LastName, @p.FirstName</button>
            }
        </div>
    </div>
    <hr />
    <p>@selectedPerson.FirstName, @selectedPerson.LastName</p>



    <style>
        .scrollableDropdown {
            max-height: 30vw;
            overflow-y: auto;
        }
    </style>
}

@code {

    PersonModel selectedPerson = new PersonModel();

    List<PersonModel> people;

    protected async override Task OnInitializedAsync()
    {
        people = await _personData.GetPeople();
    }

    private void UpdateSelectedPerson(PersonModel p)
    {
        selectedPerson = p;
    }
}
